<?php
/**
 * @author 孙美芳^life <344794095@qq.com>
 * @copyright 2016 - 2016 粮易网 <jztl2012@163.com>
 * @version $Id: 2016/9/18 0018 上午 10:01 ly2.0 AttachmentController.php 孙美芳^life $
 *  附件管理
 */
namespace Admin\Controller\Systemconfig;
use Think\Controller;
use Think\Uploadfile;
use Admin\Controller\Home\IndexController;


class AttachmentController extends IndexController {
	public function _initialize() {
		parent::_initialize(); // TODO: Change the autogenerated stub
		$this->config = M("attachment_config");
		$this->class =M("attachmentclass");
		$this->type   = array('image' => '图片', 'file' => '文件', 'video' => '视频');
		$this->perpage = 10;
	}
	//附件设置
	public function attach_setting() {
		if (IS_POST) {
			$data  = I('data');

			$water = $_FILES['water'];

			if(!empty($water['tmp_name'])){
				$uf = new Uploadfile();
				$info = $uf->run($water);
				if($info===false){
					$this->error($uf->get_error());
				}else{
					$data['watermark_file']= $uf->getRootPath().$info[0]['savepath'].$info[0]['savename'];
				}
			}

			$class = I('class');
			$id    = I('id');
			if (empty($data['save_path'])) {
				$data['save_path'] = '/public/file';
			}
			$save = $this->deal_save_data($class, $id);
			$this->config->where("name='附件设置'")->save(array('value' => json_encode($data), 'time' => NOW_TIME));
			$this->success("修改成功",U('attach_setting'));
			exit;
		}
		$config = $this->config->where("name='附件设置'")->field('value')->find();

		$file_class = $this->class->order('showorder ASC,id DESC')->select();
		foreach($file_class as $key=>$fc){
			$file_class[$key]['pics_size'] = $this->dealparam($fc['pics_size']);
		}
		$this->assign('file_class', $file_class);
		$this->assign('type', $this->type);
		$this->assign('field', json_decode($config['value'], true));
		$this->display();
	}
	//附件列表
	public function attach_list(){
		$attachment = M('Attachment');
		if(IS_POST){
			if(!empty($_POST['option'])) {
				$option = I('option');
				if ($option == 'delall') {
					$ids = trim(I('str'));
					$con['id'] = array("in", $ids);
				}elseif($option == 'delone'){
					$con['id'] =I('str',int) ;
				}
				$file_path = $attachment->where($con)->field('path,name')->select();
				//删除附件
				foreach($file_path as $f){
					unlink($f['path'].$f['name']);
				}
				$data = $attachment->where($con)->delete();
				if ($data) {
					$this->ajaxReturn(array('status'=>1,'info'=>"删除成功"));
				} else {
					$this->ajaxReturn(array('status'=>0,'info'=>"删除失败"));
				}
			}
			exit;
		}
		$where = array();
		$count = $attachment->where($where)->count();
		$result = $attachment->where($where)->order("id desc")->page(I('get.p'), $this->perpage)->select();
		//分页
		$Page= new \Think\Page($count, $this->perpage);// 实例化分页类 传入总记录数和每页显示的记录数
		$Page->lastSuffix = false;
		$show = $Page->show();// 分页显示输出
		$this->assign('list', $result);
		$this->assign('total', $count);
		$this->assign('page', $show);
		$this->assign('page_size', $this->perpage);
		$this->display();
	}
	/**
	 * @param int $length 随机字符串的长度
	 * @return mixed
	 */
	public function get_rand_string($length = 10) {
		if (IS_POST) {
			$length = I('line', int);
		}
		$this->ajaxReturn(D("attachment")->getRandString($length));
	}
	/**
	 * @param $class 存储高级配置中的信息
	 * @return mixed
	 */
	public function deal_save_data($class, $id) {
		$data = $class;
		$re = true;
		foreach ($data as $key=>$d) {
			$temp = $d;
			if(empty($d['is_thumb'])){
				$temp['is_thumb'] = 0;
			}
			if(empty($d['delete_source'])){
				$temp['delete_source'] = 0;
			}
			if(empty($d['watermark'])){
				$temp['watermark'] = 0;
			}
			if (!empty($d['pics_size'])) {
				$temp['pics_size'] = $this->deal_data_textarea($d['pics_size']);
			}
			$arr= $this->class->where("id=".$id[$key])->save($temp);
			if(false ===$arr){
				return false;
			}
			unset($temp);
		}
		return true;
	}
	/**
	 * @param $class 文本框中的数据
	 * @return mixed
	 */
	private function deal_data_textarea($da){

		$array = explode(chr(13), $da);
		$new   = array();

		foreach ($array as $item) {
			$item = trim($item);
			if (!$item) {
				continue;
			}
			$item_r = explode("==", $item);
			if (!$item_r[0] || !$item_r[1]) {
				continue;
			}
			$r = explode('*', $item_r[1]);
			$new[$item_r[0]]['width']  = intval($r[0]);
			$new[$item_r[0]]['height'] = intval($r[1]);
		}
		return json_encode($new);
	}
	/**
	 * @param $array 处理数据为一行一大小
	 */
	private function dealparam($array){
		$array = json_decode($array,true);
		$str = '';
		foreach($array as $k=>$item){
			$str .=$k."==".$item['width']."*".$item['height'].chr(13);
		}
		return $str;
	}
}