<?php
/**
 * @author 韩威兵^life <1877361302@qq.com>
 * @copyright 2015 - 2016
 * @version $Id: 2016/8/2 17:58 base MenuController.class.php 韩威兵^life $
 */
namespace Admin\Controller\Developer;
use Think\Controller;
use Admin\Controller\Home\IndexController;

class MenuController extends IndexController {
	public function _initialize() {
		parent::_initialize(); // TODO: Change the autogenerated stub
	}
	/**
	 * 菜单列表
	 */
	public function index() {
		//header("Content-type: text/html; charset=utf-8");
		$model_mune = M('admin_menu');
		$data       = $model_mune->order('reorder asc')->select();

		//dump($data);exit;
		//整理菜单列表
		foreach ($data as $k => $v) {
			//一级目录
			if ($v['rank'] == 1) {
				//一级目录组成一个新的数组
				$new_data[] = $v;
				foreach ($data as $kk => $vv) {

					//二级目录
					if ($vv['top'] == $v['top'] && $vv['rank'] == 2) {
						//准备查询条件，用来判断三级目录最后一个
						$where['top']    = $v['top'];
						$where['second'] = $vv['second'];
						$where['three']  = array('NEQ', '');
						$num             = $model_mune->field('count(id) as num')->where($where)->select();
						//二级目录紧随一级目录下来
						$new_data[] = $vv;
						//dump($vv);
						//index用来判断三级目录的最后一个
						$index = 0;
						foreach ($data as $kkk => $vvv) {
							//echo $vv['top'].'+'.$vv['second'].'+'.$vvv['top'].'+'.$vvv['second'].'+'.$vvv['rank'].'+'.$vvv['name'];
							//echo '<br/>';

							//二级目录
							if ($vvv['top'] == $vv['top'] && $vvv['rank'] == 3 && $vvv['second'] == $vv['second']) {

								$index++;
								if ($index == $num[0]['num']) {
									$vvv['last'] = 1;
								} else {
									$vvv['last'] = 0;
								}
								$new_data[] = $vvv;
							}
						}
					}
				}
			}
		}
		//dump($new_data);exit;
		$this->assign('list', $new_data);

		$this->display();
	}


	/**
	 * 菜单增加方法
	 */
	public function add() {
		//header("Content-type: text/html; charset=utf-8");
		$model_menu = M('admin_menu');
		$top_data   = $model_menu->where('rank=1')->select();
		$this->assign('top_data', $top_data);

		$index = I('index');
		//index有值代表执行增加，没值代表显示增加页面，
		if ($index) {
			$this->do_add_edit();
		}

		$this->display();
	}


	/**
	 * 修改方法
	 */
	public function edit() {
		$model_menu = M('admin_menu');
		$id         = get('id', 'intval');
		//判断是显示层还是执行修改
		if ($id) {
			$this->edit_show($id);
		} else {
			$this->do_add_edit();
		}

		$this->display('add');
	}


	/**
	 * 执行修改或增加回调函数
	 */
	public function do_add_edit() {
		$error_str       = '唯一字段不能重复!';
		$model_menu      = M('admin_menu');
		$data['name']    = post('name', 'strval', '');
		$data['icon']    = post('icon', 'strval', '');
		$data['top']     = post('top', 'strval', '');
		$data['second']  = post('second', 'strval', '');
		$data['is_show'] = post('is_show', 'intval', 1);
		$data['reorder'] = post('reorder', 'intval', 1);
		//判断添加的是否是一级菜单
		if ($data['top'] == '' && $data['second'] == '') {
			$data['rank']   = 1;
			$data['top']    = post('index', 'strtolower', '');
			$data['second'] = '';
			$data['three']  = '';
		} elseif ($data['top'] != '' && $data['second'] == '') {
			//判断是否是二级菜单
			$data['rank']   = 2;
			$data['second'] = post('index', 'strtolower', '');
			$data['three']  = '';
		} elseif ($data['top'] != '' && $data['second'] != '') {
			//判断是否是三级菜单
			$data['rank']  = 3;
			$data['three'] = post('index', 'strtolower', '');
		}
		//判断是修改还是增加
		$id = post('id', 'intval');
		if ($id) {
			//修改
			$data['id'] = $id;
			$field      = $model_menu->where('id=' . $id)->find();
			//判断用户目录结构有没有变化，如果没有变化，那就是修改图标和名字等
			if ($field['top'] == $data['top'] || $field['second'] == $data['second'] || $field['three'] == $data['three']) {
				$res = $model_menu->where('id=' . $id)->data($data)->save();
			} else {
				//修改顶级菜单为二级
				if ($field['rank'] == 1 && $data['rank'] == 2) {
					//判断是否有重复的字段
					$where_is_repeat['top']    = $data['top'];
					$where_is_repeat['second'] = $field['top'];
					$is_repeat                 = $model_menu->where($where_is_repeat)->select();
					if ($is_repeat) {
						$this->error('修改子级时，发现唯一索引有冲突！');
						exit;
					}
					//把三级菜单删除
					$where1['top']  = $field['top'];
					$where1['rank'] = 3;
					$model_menu->where($where1)->delete();
					//把二级菜单改成三级
					$where2['top']  = $field['top'];
					$where2['rank'] = 2;
					$rank1_2_list   = $model_menu->where($where2)->select();
					//循环遍历保存原来二级菜单
					$data_save2['rank']   = 3;
					$data_save2['top']    = $data['top'];
					$data_save2['second'] = $field['top'];
					foreach ($rank1_2_list as $k => $v) {
						$data_save2['three'] = $v['second'];
						$model_menu->where('id=' . $v['id'])->data($data_save2)->save();
					}
					//把一级菜单top改成掉
					$res = $model_menu->where('id=' . $id)->data($data)->save();
				} elseif ($field['rank'] == 1 && $data['rank'] == 3) {
					//判断是否有重复的字段
					$where_is_repeat['top']    = $data['top'];
					$where_is_repeat['second'] = $data['second'];
					$where_is_repeat['three']  = $field['top'];
					$is_repeat                 = $model_menu->where($where_is_repeat)->select();
					if ($is_repeat) {
						$this->error('唯一索引值冲突！');
						exit;
					}
					//二级和三级全部删除
					$where3['top']  = $field['top'];
					$where3['rank'] = array('in', '2,3');
					$model_menu->where($where3)->delete();
					//修改单个数据
					$res = $model_menu->where('id=' . $id)->data($data)->save();
				} elseif ($field['rank'] == 2 && $data['rank'] == 1) {
					//判断是否有重复的字段
					$where_is_repeat['top'] = $field['second'];
					$is_repeat              = $model_menu->where($where_is_repeat)->select();
					if ($is_repeat) {
						$this->error('唯一索引值冲突！');
						exit;
					}
					//把三级菜单删除
					$where1['top']    = $field['top'];
					$where1['second'] = $field['second'];
					$where1['rank']   = 3;
					$model_menu->where($where1)->delete();

					//修改单个数据
					$res = $model_menu->where('id=' . $id)->data($data)->save();
				} elseif ($field['rank'] == 2 && $data['rank'] == 2) {
					//判断是否有重复的字段
					$where_is_repeat['top']    = $data['top'];
					$where_is_repeat['second'] = $field['second'];
					$is_repeat                 = $model_menu->where($where_is_repeat)->select();
					if ($is_repeat) {
						$this->error('唯一索引值冲突！');
						exit;
					}
					//把三级菜单删除
					$where1['top']       = $field['top'];
					$where1['second']    = $field['second'];
					$save_data2_2['top'] = $data['top'];
					$res                 = $model_menu->where($where1)->data($save_data2_2)->save();
				} elseif ($field['rank'] == 2 && $data['rank'] == 3) {
					//判断是否有重复的字段
					$where_is_repeat['top'] = $field['second'];
					$is_repeat              = $model_menu->where($where_is_repeat)->select();
					if ($is_repeat) {
						$this->error('唯一索引值冲突！');
						exit;
					}
					//把三级菜单删除
					$where1['top']    = $field['top'];
					$where1['second'] = $field['second'];
					$where1['rank']   = 3;
					$model_menu->where($where1)->delete();

					//修改单个数据
					$res = $model_menu->where('id=' . $id)->data($data)->save();
				} elseif ($field['rank'] == 3) {
					$res = $model_menu->where('id=' . $id)->data($data)->save();
				}
			}

			if ($res) {
				$this->success('修改成功！', U('index'));
				exit;
			} else {
				$this->error('修改失败！');
				exit;
			}
		} else {
			//增加数据
			//判断唯一字符串是否是唯一
			if ($data['rank'] == 1) {
				$where['top'] = $data['top'];
			} elseif ($data['rank'] == 2) {
				$where['top']    = $data['top'];
				$where['second'] = $data['second'];
			} elseif ($data['rank'] == 3) {
				$where['top']    = $data['top'];
				$where['second'] = $data['second'];
				$where['three']  = $data['three'];
			}
			$three_res = $model_menu->where($where)->find();
			//如果查询有值，代表索引值不唯一
			if ($three_res) {
				$this->error($error_str);
				exit;
			}
			$add_id = $model_menu->data($data)->add();
			if ($add_id) {
				$this->success('添加成功！');
				exit;
			} else {
				$this->error('添加失败！');
				exit;
			}
		}
	}


	/**
	 * 修改菜单显示层回调函数
	 */
	public function edit_show($id) {
		header("Content-type: text/html; charset=utf-8");
		$admin_menu = M('admin_menu');
		$field      = $admin_menu->where('id=' . $id)->find();
		//判断为几级菜单，给一个字段，用来在页面上显示，
		if ($field['rank'] == 1) {
			$field['index'] = $field['top'];
		} elseif ($field['rank'] == 2) {
			$field['index'] = $field['second'];
		} elseif ($field['rank'] == 3) {
			$field['index'] = $field['three'];
		}
		//判断是否显示
		if ($field['is_show'] == 1) {
			$field['show'] = 'checked';
		} else {
			$field['no_show'] = 'checked';
		}

		if ($field['rank'] == 1) {
			//顶级栏目菜单数据
			$top_data = $admin_menu->where('rank=1')->select();
		}

		if ($field['rank'] == 2 || $field['rank'] == 3) {
			//顶级栏目菜单数据
			$top_data = $admin_menu->where('rank=1')->select();
			foreach ($top_data as $k => $v) {
				//让该菜单的祖先顶级菜单默认选中
				if ($field['top'] == $v['top']) {
					$top_data[$k]['select'] = 'selected';
				}
			}
		}

		//如果是三级菜单需要选择他的上级菜单，
		if ($field['rank'] == 3) {
			//二级菜单数据
			$two_where['rank'] = 2;
			$two_where['top']  = $field['top'];
			$two_data          = $admin_menu->where($two_where)->select();
			foreach ($two_data as $k => $v) {
				//让该菜单的父亲二级菜单默认选中
				if ($field['second'] == $v['second']) {
					$two_data[$k]['select'] = 'selected';
				}
			}
		}

		$this->assign('two_data', $two_data);
		$this->assign('top_data', $top_data);

		$this->assign('field', $field);
	}


	/**
	 * 删除操作
	 */
	public function data_delete() {
		$id        = I('id');
		$model_mune = M('admin_menu');

		$field = $model_mune->where('id=' . $id)->find();
		if ($field['rank'] == 3) {
			$res = $model_mune->where('id=' . $id)->delete();
		} elseif ($field['rank'] == 2) {
			$where_delete['top']    = $field['top'];
			$where_delete['second'] = $field['second'];
			$res                    = $model_mune->where($where_delete)->delete();
		} elseif ($field['rank'] == 1) {
			$where_delete['top'] = $field['top'];
			$res                 = $model_mune->where($where_delete)->delete();
		}
		if ($res) {
			$this->success('删除成功！');
		} else {
			$this->error('删除失败！');
		}
	}


	/**
	 * 删除
	 */
	public function delete() {
		$this->paner_delete(M('admin_menu'));
	}


	/**
	 * ajax获取二级菜单列表
	 */
	public function ajax_second() {
		$index         = I('top');
		$model_menu    = M('admin_menu');
		$where['top']  = $index;
		$where['rank'] = 2;
		$second        = $model_menu->where($where)->select();
		if ($second) {
			$str = '';
			foreach ($second as $k => $v) {
				$str .= "<option value='{$v["second"]}'>{$v["name"]}</option>";
			}
			$this->success($str);
		} else {
			$this->error('数据为空');
		}
	}


}